from telebot import types
from check_calendar import check_calendar
from create_shift_button import create_shift_event
from allowed_users import allowed_users
import datetime
from i18n import translate as _

def log_user_action(username, action, timestamp):
    with open("user_actions.txt", "a") as file:
        file.write(f"[{timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}\n")

def add_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start(message):
        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton(_("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"))
        btn2 = types.KeyboardButton(_("–†–∞–±–æ—Ç–∞"))
        user_markup.add(btn1, btn2)

        if message.from_user.username in allowed_users:
            btn3 = types.KeyboardButton(_("–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É"))
            user_markup.add(btn3)

        bot.send_message(message.chat.id, _("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –°–¢–û. –í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}").format(username=message.from_user.username), reply_markup=user_markup)

    @bot.message_handler(func=lambda message: message.text == _("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"))
    def greet(message):
        bot.send_message(message.chat.id, _("–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–Ω–æ–π. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–†–ê–ë–û–¢–ê\"."))

    @bot.message_handler(func=lambda message: message.text == _("–†–∞–±–æ—Ç–∞"))
    def check_calendar_handler(message):
        try:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_user_action(message.from_user.username, "–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–†–∞–±–æ—Ç–∞'", timestamp)
            check_calendar(bot, message)
        except Exception as e:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ", e)
            bot.send_message(message.chat.id, _("–°–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç."))

    @bot.message_handler(func=lambda message: message.text == _("–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É"))
    def create_shift(message):
        try:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_user_action(message.from_user.username, "–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É'", timestamp)
            bot.send_message(message.chat.id, _("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É (–¥–¥-–º–º-–≥–≥–≥–≥, –ù–∞–ø—Ä–∏–º–µ—Ä: 01-01-2024)?"))
            bot.register_next_step_handler(message, ask_date)
        except Exception as e:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ", e)
            bot.send_message(message.chat.id, _("–°–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç."))

    def ask_date(message):
        date = message.text
        bot.send_message(message.chat.id, _("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É —Å–º–µ–Ω—ã:"))
        bot.register_next_step_handler(message, lambda message: ask_summary(message, date))

    def ask_summary(message, date):
        summary = message.text
        try:
            create_shift_event(bot, message, date, summary)
        except Exception as e:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ", e)
            bot.send_message(message.chat.id, _("–°–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç."))
